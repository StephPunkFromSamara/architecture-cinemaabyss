import os
import random
from fastapi import FastAPI, Request
import httpx
from fastapi.responses import Response

app = FastAPI()

# –ß–∏—Ç–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
MONOLITH_URL = os.environ["MONOLITH_URL"]
MOVIES_SERVICE_URL = os.environ["MOVIES_SERVICE_URL"]
EVENTS_SERVICE_URL = os.environ["EVENTS_SERVICE_URL"]

GRADUAL_MIGRATION = os.getenv("GRADUAL_MIGRATION", "false").lower() == "true"
MOVIES_MIGRATION_PERCENT = int(os.getenv("MOVIES_MIGRATION_PERCENT", "0"))


@app.api_route("/{path:path}", methods=["GET", "POST", "PUT", "DELETE", "PATCH"])
async def proxy(path: str, request: Request):
    """
    –ü—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–∏—Å (API Gateway).
    –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —à–ª—ë—Ç –≤ –º–æ–Ω–æ–ª–∏—Ç, –Ω–æ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω —Ñ–∏—á–µ-—Ñ–ª–∞–≥ ‚Äî —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç—Ä–∞—Ñ–∏–∫.
    """

    target_url = f"{MONOLITH_URL}/{path}"  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –º–æ–Ω–æ–ª–∏—Ç

    # üé¨ –õ–æ–≥–∏–∫–∞ –¥–ª—è /api/movies
    if path.startswith("api/movies"):
        if GRADUAL_MIGRATION:
            roll = random.randint(1, 100)
            if roll <= MOVIES_MIGRATION_PERCENT:
                target_url = f"{MOVIES_SERVICE_URL}/{path}"
                print(f"[PROXY] ‚Üí movies-service ({roll}% <= {MOVIES_MIGRATION_PERCENT}%)")
            else:
                target_url = f"{MONOLITH_URL}/{path}"
                print(f"[PROXY] ‚Üí monolith ({roll}% > {MOVIES_MIGRATION_PERCENT}%)")
        else:
            print("[PROXY] Migration OFF ‚Üí monolith")

     üìÖ –ü–æ–∫–∞ events –æ—Å—Ç–∞—ë—Ç—Å—è –≤ –º–æ–Ω–æ–ª–∏—Ç–µ (—Ç–µ—Å—Ç—ã –ø–∞–¥–∞—é—Ç –Ω–∞ events –ø–æ —É—Å–ª–æ–≤–∏—é –∑–∞–¥–∞–Ω–∏—è)
        if path.startswith("api/events"):
         target_url = f"{MONOLITH_URL}/{path}"
     print("[PROXY] Events ‚Üí –º–æ–Ω–æ–ª–∏—Ç")

    # –ü—Ä–æ–∫—Å–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
    async with httpx.AsyncClient() as client:
        resp = await client.request(
            method=request.method,
            url=target_url,
            headers={k: v for k, v in request.headers.items() if k.lower() != "host"},
            content=await request.body(),
            params=request.query_params
        )

    return Response(
        content=resp.content,
        status_code=resp.status_code,
        headers=dict(resp.headers)
    )